{"version":3,"sources":["js/config.js","js/series.js"],"names":["config","api_key","api_base_url","image_base_url","BASE_URL","API_KEY","searchedSeriesDiv","document","getElementById","seriesDiv","searchButton","searchedTitles","addEventListener","userQuery","value","searchURL","fetchSearchedSeries","data","fetch","response","json","responseData","results","console","log","style","display","innerHTML","map","tv","renderSingleShow","join","fetchSeries","page","allSeriesUrl","poster_path","name"],"mappings":";;ACCA;;AAIA,IAAMI,QAAQ,GAAGJ,eAAOE,YAAxB;AACA,IAAMG,OAAO,GAAGL,eAAOC,OAAvB;ADLO,ACMP,IDNaD,ACMPM,MDNa,GAAG,QCMC,GAAGC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAA1B;ADLIP,ACMJ,EDNIA,ECMEQ,KDNK,EAAE,ECME,GAAGF,QAAQ,CAACC,cAAT,CAAwB,KDPpB,OCOJ,CAAlB;ADLIN,ACMJ,EDNIA,ECMAQ,UDNY,EAAE,ACMF,GAAGH,QAAQ,CAACC,cAAT,CAAwB,IDRrB,kBCQH,CAAnB;ADLIL,ACMJ,EDNIA,ECMEQ,YDNY,EAAE,ACMA,GAAGJ,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,CAAvB;ADTsB,ACWtBE,CDXO,WCWK,CAACE,gBAAb,CAA8B,OAA9B,EAAuC,YAAY;AAC/C,MAAIC,SAAS,GAAGN,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CM,KAA1D;AAEA,MAAIC,SAAS,aAAMX,QAAN,+BAAmCC,OAAnC,mCAAmEQ,SAAnE,yBAAb;;AAEA,WAAeG,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,IADR,GACe,EADf;AAAA;AAAA;AAAA,4CAG+BC,KAAK,CAACH,SAAD,CAHpC;;AAAA;AAGcI,YAAAA,QAHd;AAAA;AAAA,4CAImCA,QAAQ,CAACC,IAAT,EAJnC;;AAAA;AAIcC,YAAAA,YAJd;AAKQJ,YAAAA,IAAI,GAAGI,YAAY,CAACC,OAApB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AANR;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAUIN,YAAAA,cAAc,CAACc,KAAf,CAAqBC,OAArB,GAA+B,OAA/B;AACApB,YAAAA,iBAAiB,CAACqB,SAAlB,GAA8BV,IAAI,CAACW,GAAL,CAAS,UAAAC,EAAE;AAAA,qBAAIC,gBAAgB,CAACD,EAAD,CAApB;AAAA,aAAX,EAAqCE,IAArC,CAA0C,EAA1C,CAA9B;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaAf,EAAAA,mBAAmB;AACtB,CAnBD;;AAqBA,SAAegB,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,UAAAA,IADR,GACe,CADf;AAEQC,UAAAA,YAFR,aAE0B9B,QAF1B,gCAEwDC,OAFxD,kCAEuF4B,IAFvF;AAGQhB,UAAAA,IAHR,GAGe,EAHf;AAAA;AAAA;AAAA,0CAK+BC,KAAK,CAACgB,YAAD,CALpC;;AAAA;AAKcf,UAAAA,QALd;AAAA;AAAA,0CAMmCA,QAAQ,CAACC,IAAT,EANnC;;AAAA;AAMcC,UAAAA,YANd;AAOQJ,UAAAA,IAAI,GAAGI,YAAP;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AARR;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAYIR,UAAAA,SAAS,CAACkB,SAAV,GAAsBV,IAAI,CAACK,OAAL,CAAaM,GAAb,CAAiB,UAAAC,EAAE;AAAA,mBAAIC,gBAAgB,CAACD,EAAD,CAApB;AAAA,WAAnB,EAA6CE,IAA7C,CAAkD,EAAlD,CAAtB;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcAC,WAAW;;AAEX,SAASF,gBAAT,CAA0BD,EAA1B,EAA8B;AAC1B,MAAIA,EAAE,CAACM,WAAH,IAAkB,IAAtB,EAA4B;AACxB,qEAGoBnC,eAAOG,cAAP,GAAwB0B,EAAE,CAACM,WAH/C,uCAGoFN,EAAE,CAACO,IAHvF,4DAIoCP,EAAE,CAACO,IAJvC;AAQH;AACJ","file":"series.202c0b22.js","sourceRoot":"../src","sourcesContent":["\nexport const config = {\n    api_key: 'fd940caa3dfcfc92860ced4170dcd511',\n    api_base_url: 'https://api.themoviedb.org/3/',\n    image_base_url: 'https://image.tmdb.org/t/p/w200'\n}","\nimport {\n    config\n} from \"./config.js\";\n\nconst BASE_URL = config.api_base_url\nconst API_KEY = config.api_key\nconst searchedSeriesDiv = document.getElementById(\"searched-series\");\nconst seriesDiv = document.getElementById(\"all-series\");\nlet searchButton = document.getElementById(\"search-button-series\");\nconst searchedTitles = document.getElementById(\"searched-titles-tv\");\n\nsearchButton.addEventListener(\"click\", function () {\n    let userQuery = document.getElementById(\"title_input_tv\").value;\n\n    let searchURL = `${BASE_URL}search/tv?api_key=${API_KEY}&language=en-US&query=${userQuery}&include_adult=false`\n\n    async function fetchSearchedSeries() {\n        let data = []\n        try {\n            const response = await fetch(searchURL)\n            const responseData = await response.json()\n            data = responseData.results\n            console.log(data);\n        } catch (error) {\n\n        }\n        searchedTitles.style.display = \"block\";\n        searchedSeriesDiv.innerHTML = data.map(tv => renderSingleShow(tv)).join(\"\")\n    }\n    fetchSearchedSeries();\n})\n\nasync function fetchSeries() {\n    let page = 1;\n    let allSeriesUrl = `${BASE_URL}tv/popular?api_key=${API_KEY}&language=en-US&page=${page}`;\n    let data = []\n    try {\n        const response = await fetch(allSeriesUrl)\n        const responseData = await response.json()\n        data = responseData\n        console.log(data);\n    } catch (error) {\n\n    }\n    seriesDiv.innerHTML = data.results.map(tv => renderSingleShow(tv)).join(\"\")\n}\nfetchSeries();\n\nfunction renderSingleShow(tv) {\n    if (tv.poster_path != null) {\n        return (\n            `\n            <div>\n                <img src=\"${config.image_base_url + tv.poster_path}\" class=\"featured\" alt=${tv.name}>\n                <p class=\"title-centered\">${tv.name}</p>\n            </div>\n            `\n        )\n    }\n}"]}